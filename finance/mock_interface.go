// Code generated by mockery v2.39.1. DO NOT EDIT.

package finance

import mock "github.com/stretchr/testify/mock"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// ConvertCurrency provides a mock function with given fields: from, to, amount
func (_m *MockInterface) ConvertCurrency(from string, to string, amount float64) (float64, error) {
	ret := _m.Called(from, to, amount)

	if len(ret) == 0 {
		panic("no return value specified for ConvertCurrency")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64) (float64, error)); ok {
		return rf(from, to, amount)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64) float64); ok {
		r0 = rf(from, to, amount)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = rf(from, to, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
